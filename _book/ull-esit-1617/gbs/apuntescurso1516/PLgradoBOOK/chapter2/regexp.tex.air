\chapter{Expresiones Regulares y Análisis Léxico en JavaScript}
\label{chapter:expresionesregularesyanalisslexico}
%  Power Sh. JavaScript Cookbook. Chapter 1. Working with JavaScript Strings
%  David Flanagan. JavaScript, the Definitive Guide. O'Reilly.  Chapter 10.
%  JavaScript. The Missing Manual. Chapter 4. working with words, numbers and dates. A quick object lesson

\section{Mozilla Developer Network: Documentación}

\begin{enumerate}
\item \htmladdnormallink{RegExp Objects}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Regexp}
\item 
\htmladdnormallink{exec}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec}
\item 
\htmladdnormallink{search}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/search}
\item 
\htmladdnormallink{match}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/match}
\item 
\htmladdnormallink{replace}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/replace}
\end{enumerate}

\sectionpractica{Conversor de Temperaturas}
\label{sectionpractica:conversordetemperaturas}

Véase 
\htmladdnormallink{https://bitbucket.org/casiano/pl-grado-temperature-converter/src}{https://bitbucket.org/casiano/pl-grado-temperature-converter/src}.

\begin{verbatim}
[~/srcPLgrado/temperature(master)]$ pwd -P
/Users/casiano/local/src/javascript/PLgrado/temperature # 27/01/2014
\end{verbatim}

\parrafo{index.html}

  \begin{latexonly}
    \begin{verbatim}

<html>
  <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>JavaScript Temperature Converter</title>
      <link href="global.css" rel="stylesheet" type="text/css">

     <script type="text/javascript" src="temperature.js"></script>
  </head>
  <body>
    <h1>Temperature Converter</h1>
    <table>
      <tr>
        <th>Enter  Temperature (examples: 32F, 45C, -2.5f):</th>
        <td><input id="original" onchange="calculate();"></td>
      </tr>
      <tr>
        <th>Converted Temperature:</th>
        <td><span class="output" id="converted"></span></td>
      </tr>
    </table>
  </body>
</html>

    \end{verbatim}
  \end{latexonly}
    \begin{rawhtml}
    <pre>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=UTF-8&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;title&gt;</span>JavaScript Temperature Converter<span class="nt">&lt;/title&gt;</span>
      <span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;global.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>

     <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;temperature.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Temperature Converter<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;table&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>Enter  Temperature (examples: 32F, 45C, -2.5f):<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;td&gt;&lt;input</span> <span class="na">id=</span><span class="s">&quot;original&quot;</span> <span class="na">onchange=</span><span class="s">&quot;calculate();&quot;</span><span class="nt">&gt;&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
      <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>Converted Temperature:<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;td&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;output&quot;</span> <span class="na">id=</span><span class="s">&quot;converted&quot;</span><span class="nt">&gt;&lt;/span&gt;&lt;/td&gt;</span>
      <span class="nt">&lt;/tr&gt;</span>
    <span class="nt">&lt;/table&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
    </pre>
    \end{rawhtml}
  

\parrafo{global.css}


  \begin{latexonly}
    \begin{verbatim}

th, td      { vertical-align: top; text-align: right; font-size:large; }     
#converted  { color: red; font-weight: bold; font-size:large;          }    
input       { text-align: right;  border: none; font-size:large;       }   
body
{
 background-color:#b0c4de;  /* blue */
 font-size:large;
}

    \end{verbatim}
  \end{latexonly}
    \begin{rawhtml}
    <pre>
<span class="nt">th</span><span class="o">,</span> <span class="nt">td</span>      <span class="p">{</span> <span class="k">vertical-align</span><span class="o">:</span> <span class="k">top</span><span class="p">;</span> <span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span> <span class="k">font-size</span><span class="o">:</span><span class="k">large</span><span class="p">;</span> <span class="p">}</span>     
<span class="nf">#converted</span>  <span class="p">{</span> <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="k">font-size</span><span class="o">:</span><span class="k">large</span><span class="p">;</span>          <span class="p">}</span>    
<span class="nt">input</span>       <span class="p">{</span> <span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>  <span class="k">border</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="k">font-size</span><span class="o">:</span><span class="k">large</span><span class="p">;</span>       <span class="p">}</span>   
<span class="nt">body</span>
<span class="p">{</span>
 <span class="k">background-color</span><span class="o">:</span><span class="m">#b0c4de</span><span class="p">;</span>  <span class="c">/* blue */</span>
 <span class="k">font-size</span><span class="o">:</span><span class="k">large</span><span class="p">;</span>
<span class="p">}</span>
    </pre>
    \end{rawhtml}
  

\parrafo{temperature.js}


  \begin{latexonly}
    \begin{verbatim}

"use strict"; // Use ECMAScript 5 strict mode in browsers that support it
function calculate() {
  var result;
  var original       = document.getElementById("........");
  var temp = original.value;
  var regexp = /.............................../;
  
  var m = temp.match(......);
  
  if (m) {
    var num = ....;
    var type = ....;
    num = parseFloat(num);
    if (type == 'c' || type == 'C') {
      result = (num * 9/5)+32;
      result = ..............................
    }
    else {
      result = (num - 32)*5/9;
      result = ............................
    }
    converted.innerHTML = result;
  }
  else {
    converted.innerHTML = "ERROR! Try something like '-4.2C' instead";
  }
}

    \end{verbatim}
  \end{latexonly}
    \begin{rawhtml}
    <pre>
<span class="s2">&quot;use strict&quot;</span><span class="p">;</span> <span class="c1">// Use ECMAScript 5 strict mode in browsers that support it</span>
<span class="kd">function</span> <span class="nx">calculate</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">result</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">original</span>       <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;........&quot;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">original</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="sr">/.............................../</span><span class="p">;</span>
  
  <span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">match</span><span class="p">(......);</span>
  
  <span class="k">if</span> <span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="p">....;</span>
    <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="p">....;</span>
    <span class="nx">num</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;c&#39;</span> <span class="o">||</span> <span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;C&#39;</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num</span> <span class="o">*</span> <span class="mi">9</span><span class="o">/</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="mi">32</span><span class="p">;</span>
      <span class="nx">result</span> <span class="o">=</span> <span class="p">..............................</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="nx">result</span> <span class="o">=</span> <span class="p">(</span><span class="nx">num</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span><span class="o">*</span><span class="mi">5</span><span class="o">/</span><span class="mi">9</span><span class="p">;</span>
      <span class="nx">result</span> <span class="o">=</span> <span class="p">............................</span>
    <span class="p">}</span>
    <span class="nx">converted</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span>
    <span class="nx">converted</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot;ERROR! Try something like &#39;-4.2C&#39; instead&quot;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
    </pre>
    \end{rawhtml}
  
\parrafo{Despliegue}
\begin{itemize}
\item
Deberá desplegar la aplicación en GitHub Pages como página de proyecto.
Vea la sección {\it GitHub Project Pages} \ref{subsection:githubprojectpages}.
\end{itemize}

\parrafo{Mocha y Chai}
Mocha is a test framework while Chai is an expectation one. 

Let's say
Mocha setups and describes test suites and Chai provides convenient
helpers to perform all kinds of assertions against your JavaScript code.

\parrafo{Pruebas: Estructura}

Instale \verb|mocha|.
\begin{verbatim}
$ npm install -g mocha
\end{verbatim}

Creamos la estructura para las pruebas:

\begin{verbatim}
$ mocha init tests
\end{verbatim}

\begin{verbatim}
$ tree tests
tests
|-- index.html
|-- mocha.css
|-- mocha.js
`-- tests.js
\end{verbatim}

Añadimos \verb|chai.js|
(Véase 
\htmladdnormallink{http://chaijs.com/guide/installation/}{http://chaijs.com/guide/installation/}) al directorio \verb|tests|.

The latest tagged version will be available for hot-linking at 
\htmladdnormallink{http://chaijs.com/chai.js}{http://chaijs.com/chai.js}.

If you prefer to host yourself, use the \verb|chai.js| file from the root of the 
\htmladdnormallink{github project}{https://github.com/chaijs/chai}. 

\begin{verbatim}
[~/srcPLgrado/temperature(master)]$ tree tests/
tests/
|-- chai.js
|-- index.html
|-- mocha.css
|-- mocha.js
`-- tests.js

0 directories, 5 files
\end{verbatim}
Podemos encontrar un ejemplo de  unit testing en JavaScript en el browser con 
el testing framework Mocha y  Chai en el repositorio 
\htmladdnormallink{https://github.com/ludovicofischer/mocha-chai-browser-demo}{https://github.com/ludovicofischer/mocha-chai-browser-demo}.

\parrafo{Pruebas: {\tt index.html}}

Modificamos \verb|index.html| para 
\begin{itemize}
\item
Cargar \verb|chai.js|
\item
Cargar \verb|temperature.js|
\item
Usar el estilo \verb|mocha.setup('tdd')|:
\item
Imitar la página \verb|index.html| con los correspondientes \verb|input| y 
\verb|span|:
\begin{verbatim}
    <input id="original" placeholder="32F" size="50">
    <span class="output" id="converted"></span>
\end{verbatim}
\end{itemize}

\begin{verbatim}
[~/srcPLgrado/temperature(master)]$ cat tests/index.html 
<!DOCTYPE html>
<html>
  <head>
    <title>Mocha</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="mocha.css" />
  </head>
  <body>
    <div id="mocha"></div>
    <input id="original" placeholder="32F" size="50">
    <span class="output" id="converted"></span>

    <script src="chai.js"></script>
    <script src="mocha.js"></script>
    <script src="../temperature.js"></script>
    <script>mocha.setup('tdd')</script>
    <script src="tests.js"></script>

    <script>
      mocha.run();
    </script>
  </body>
</html>
\end{verbatim}

\parrafo{Pruebas: Añadir los tests}

The "TDD" interface provides 
\begin{itemize}
\item \verb|suite()|
\item  \verb|test()|
\item  \verb|setup()|
\item  \verb|teardown()|.
\end{itemize}

\begin{verbatim}
[~/srcPLgrado/temperature(master)]$ cat tests/tests.js 
var assert = chai.assert;

suite('temperature', function() {
    test('32F = 0C', function() {
        original.value = "32F";
        calculate();
        assert.deepEqual(converted.innerHTML, "0.0 Celsius");
    });
    test('45C = 113.0 Farenheit', function() {
        original.value = "45C";
        calculate();
        assert.deepEqual(converted.innerHTML, "113.0 Farenheit");
    });
    test('5X = error', function() {
        original.value = "5X";
        calculate();
        assert.match(converted.innerHTML, /ERROR/);
    });
});
\end{verbatim}


\parrafo{Pruebas: Véase}
\begin{itemize}
\item
\htmladdnormallink{Testing your frontend JavaScript code using mocha, chai, and sinon}{https://nicolas.perriault.net/code/2013/testing-frontend-javascript-code-using-mocha-chai-and-sinon/} by Nicolas Perriault
\end{itemize}

\sectionpractica{Comma Separated Values. CSV}
\label{sectionpractica:csv}

\parrafo{Donde}

\begin{verbatim}
[~/srcPLgrado/csv(master)]$ pwd -P
/Users/casiano/local/src/javascript/PLgrado/csv\end{verbatim}

Véase
\htmladdnormallink{https://bitbucket.org/casiano/pl-grado-csv/src}{https://bitbucket.org/casiano/pl-grado-csv/src}
y
\htmladdnormallink{https://github.com/crguezl/csv}{https://github.com/crguezl/csv}.

\parrafo{Introducción al formato CSV}

Véase \wikip{Comma Separated Values}{Comma-separated_values} en la Wikipedia:

{\it A comma-separated values (CSV) file stores tabular data (numbers
and text) in plain-text form. 
 A CSV file consists of any number of
records, separated by line breaks of some kind; each record consists
of fields, separated by a comma. All records have an identical
sequence of fields.}

\parrafo{Ejemplo de ejecución}

Véase la página en 
\htmladdnormallink{http://crguezl.github.io/csv/}{http://crguezl.github.io/csv/}.
Pruebe a dar como entrada cualquiera de estas dos
\begin{verbatim}
[~/srcPLgrado/csv(gh-pages)]$ cat input.txt 
"producto",           "precio"
"camisa",             "4,3"
"libro de O\"Reilly", "7,2"
\end{verbatim}

\begin{verbatim}
[~/srcPLgrado/csv(gh-pages)]$ cat input2.txt 
"producto",           "precio"  "fecha"
"camisa",             "4,3",    "14/01"
"libro de O\"Reilly", "7,2"     "13/02"
\end{verbatim}

Pruebe también a dar alguna entrada errónea.

\begin{latexonly}
\begin{figure}[htb]
\begin{center}
\centerline{\epsfig{file=chapter2/csv.eps, width=17cm}}
\end{center}
\label{figure:csv}
\caption{Ejemplo de pantalla de La aplicación para el Análisis de Datos en Formato CSV}
\end{figure}
\end{latexonly}

\begin{rawhtml}
<DIV ALIGN="CENTER"><A NAME="figure:csv"></A><A NAME="1213"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figura:</STRONG>
Ejemplo de pantalla de La aplicación para el Análisis de Datos en Formato CSV</CAPTION>
<TR><TD><IMG
 WIDTH="769" HEIGHT="410" BORDER="0"
 SRC="csv.png"
 ALT="\begin{figure}\begin{center}
\centerline{\epsfig{file=chapter2/csv.eps, width=17cm}}
\end{center}
\end{figure}"></TD></TR>
</TABLE>
</DIV>
\end{rawhtml}



\parrafo{Aproximación al análisis mediante expresiones regulares de CSV}
Una primera aproximación sería hacer \verb|split| por las comas:
\begin{verbatim}
> x = '"earth",1,"moon",9.374'
'"earth",1,"moon",9.374'
> y = x.split(/,/)
[ '"earth"', '1', '"moon"', '9.374' ]
\end{verbatim}

Esta solución deja las comillas dobles en los campos entrecomillados. 
Peor aún, los campos entrecomillados pueden contener comas, en cuyo 
caso la división proporcionada por \verb|split| sería errónea:
\begin{verbatim}
> x = '"earth, mars",1,"moon, fobos",9.374'
'"earth, mars",1,"moon, fobos",9.374'
> y = x.split(/,/)
[ '"earth', ' mars"', '1', '"moon', ' fobos"', '9.374' ]
\end{verbatim}

La siguiente expresión regular reconoce cadenas de comillas dobles
con secuencias de escape seguidas opcionalmente de una coma:
\begin{verbatim}
> x = '"earth, mars",1,"moon, fobos",9.374'
'"earth, mars",1,"moon, fobos",9.374'
> r = /"((?:[^"\\]|\\.)*)"\s*,?/g
/"((?:[^"\\]|\\.)*)"\s*,?/g
> w = x.match(r)
[ '"earth, mars",', '"moon, fobos",' ]
\end{verbatim}
If your regular expression uses the \verb"g" flag, you can use the \verb|exec| 
or \verb|match| methods
multiple times to find successive matches in the same string. When
you do so, the search starts at the substring of string specified by the
regular expression's \verb|lastIndex| property.

Javascript sub-matches stop working when the \verb|g| modifier is set:
\begin{verbatim}
> text = 'test test test test'
'test test test test'
> text.match(/t(e)(s)t/)
[ 'test', 'e', 's', index: 0, input: 'test test test test' ]
> text.match(/t(e)(s)t/g)
[ 'test', 'test', 'test', 'test' ] 
\end{verbatim}
Sin embargo el método \verb|exec| de las expresiones regulares si que 
conserva las subexpresiones que casan con los paréntesis:
\begin{verbatim}
> r = /t(e)(s)t/g
/t(e)(s)t/g
> text = 'test test test test'
'test test test test'
> while (m = r.exec(text)) {
... console.log(m);
... }
[ 'test', 'e', 's', index: 0, input: 'test test test test' ]
[ 'test', 'e', 's', index: 5, input: 'test test test test' ]
[ 'test', 'e', 's', index: 10, input: 'test test test test' ]
[ 'test', 'e', 's', index: 15, input: 'test test test test' ]
undefined
\end{verbatim}
Another catch to remember is that \verb|exec()| doesn't return the matches in
one big array: it keeps returning matches until it runs out, in which
case it returns \verb|null|.

Véase
\begin{itemize}
\item
\htmladdnormallink{Javascript Regex and Submatches}{http://stackoverflow.com/questions/844001/javascript-regex-and-submatches}
en StackOverflow.
\item
La sección 
{\it Ejercicios}
\ref{section:ejercicioslastindex}
\end{itemize}

Esta otra expresión regular \verb#/([^,]+),?|\s*,/# actúa de forma parecida al \verb|split|. 
Reconoce secuencias no vacías de caracteres que no contienen comas seguidas opcionalmente
de una coma o bien una sóla coma (precedida opcionalmente de blancos):
\begin{verbatim}
> x = '"earth, mars",1,"moon, fobos",9.374'
'"earth, mars",1,"moon, fobos",9.374'
> r = /([^,]+),?|\s*,/g
/([^,]+),?|\s*,/g
> w = x.match(r)
[ '"earth,', ' mars",', '1,', '"moon,', ' fobos",', '9.374' ]
\end{verbatim}

La siguiente expresión regular es la unión de dos: 
\begin{itemize}
\item
Cadenas de dobles comillas seguidas de una coma opcional entre espacios en blanco
\item
Cadenas que no tienen comas
\end{itemize}
\begin{verbatim}
>  x = '"earth, mars",1,"moon, fobos",9.374'
'"earth, mars",1,"moon, fobos",9.374'
> r = /\s*"((?:[^"\\]|\\.)*)"\s*,?|\s*([^,]+),?|\s*,/g
/\s*"((?:[^"\\]|\\.)*)"\s*,?|\s*([^,]+),?|\s*,/g
> w = x.match(r)
[ '"earth, mars",', '1,', '"moon, fobos",', '9.374' ]
\end{verbatim}
El operador \verb#|# trabaja en circuito corto:
\begin{verbatim}
> r = /(ba?)|(b)/
/(ba?)|(b)/
> r.exec("ba")
[ 'ba', 'ba', undefined, index: 0, input: 'ba' ]
> r = /(b)|(ba?)/
/(b)|(ba?)/
> r.exec("ba")
[ 'b', 'b', undefined, index: 0, input: 'ba' ]
\end{verbatim}

Si usamos \verb|exec| tenemos:
\begin{verbatim}
> x = '"earth, mars",1,"moon, fobos",9.374'
'"earth, mars",1,"moon, fobos",9.374'
> r = /\s*"((?:[^"\\]|\\.)*)"\s*,?|\s*([^,]+),?|\s*,/g
/\s*"((?:[^"\\]|\\.)*)"\s*,?|\s*([^,]+),?|\s*,/g
> while (m = r.exec(x)) { console.log(m); }
[ '"earth, mars",', 'earth, mars', undefined, index: 0,
  input: '"earth, mars",1,"moon, fobos",9.374' ]
[ '1,', undefined, '1', index: 14,
  input: '"earth, mars",1,"moon, fobos",9.374' ]
[ '"moon, fobos",', 'moon, fobos', undefined, index: 16,
  input: '"earth, mars",1,"moon, fobos",9.374' ]
[ '9.374', undefined, '9.374', index: 30,
  input: '"earth, mars",1,"moon, fobos",9.374' ]
undefined
\end{verbatim}

\begin{enumerate}
\item \htmladdnormallink{RegExp Objects}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Regexp}

The \verb|RegExp| constructor creates a regular expression object for matching text with a pattern.

Literal and constructor notations are possible:

\begin{verbatim}
/pattern/flags; 
new RegExp(pattern [, flags]);
\end{verbatim}

\begin{itemize}
\item
The literal notation provides compilation of the regular expression
when the expression is evaluated. 

\item
Use literal notation when the regular
expression will remain constant. 

\item
For example, if you use literal notation
to construct a regular expression used in a loop, the regular expression
won't be recompiled on each iteration.
\end{itemize}

\begin{itemize}
\item
The constructor of the regular expression object, for example,
\verb|new RegExp("ab+c")|, provides runtime compilation of the regular
expression. 

\item
Use the constructor function when you know the regular
expression pattern will be changing, or you don't know the pattern and
are getting it from another source, such as user input.

\item
When using the constructor function, the normal string escape rules
(preceding special characters with \verb|\| when included in a string) are
necessary. For example, the following are equivalent:

\begin{verbatim}
var re = /\w+/;
var re = new RegExp("\\w+");
\end{verbatim}
\end{itemize}

\item 
\htmladdnormallink{exec}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec}
\item 
\htmladdnormallink{search}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/search}

\verb|str.search(regexp)|

If successful, search returns the index of the regular expression inside
the string. Otherwise, it returns \verb|-1|.

When you want to know whether a pattern is found in a string use search
(similar to the regular expression \verb|test| method); for more information
(but slower execution) use \verb|match| (similar to the regular expression
\verb|exec| method).
\item 
\htmladdnormallink{match}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/match}
\item 
\htmladdnormallink{replace}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/replace}

The \verb|replace()| method returns a new string with some or all matches of
a pattern replaced by a replacement.  
The pattern can be a string or a \verb|RegExp|, 
and the replacement can be a string or a function to be called
for each match.

\begin{verbatim}
> re = /apples/gi
/apples/gi
> str = "Apples are round, and apples are juicy."
'Apples are round, and apples are juicy.'
> newstr = str.replace(re, "oranges")
'oranges are round, and oranges are juicy.'
\end{verbatim}

The replacement string can be a function to be invoked to create the
new substring (to put in place of the substring received from parameter
\verb|#1|). The arguments supplied to this function are:

\begin{tabular}{|p{5cm}|p{17cm}|}
Possible name   & Supplied value \\
match           & The matched substring. (Corresponds to \verb|$&|.)\\
p1, p2, ...     & The nth parenthesized submatch string, provided the first argument to replace was a RegExp object. (Corresponds to \verb|$1|, \verb|$2|, etc.) 
For example, if \verb|/(\a+)(\b+)/|, was given, p1 is the match for
\verb|\a+|, and p2 for \verb|\b+|.\\
offset          & The offset of the matched substring within the total string being examined. 
                  (For example, if the total string was \verb"abcd", and the
                  matched substring was \verb"bc", then this argument will
                  be \verb|1|.) \\
string  &The total string being examined \\
\end{tabular}

\begin{verbatim}
[~/javascript/learning]$ pwd -P
/Users/casiano/local/src/javascript/learning
[~/javascript/learning]$ cat f2c.js 
#!/usr/bin/env node
function f2c(x)
{
  function convert(str, p1, offset, s)
  {
    return ((p1-32) * 5/9) + "C";
  }
  var s = String(x);
  var test = /(\d+(?:\.\d*)?)F\b/g;
  return s.replace(test, convert);
}

var arg = process.argv[2] || "32F";
console.log(f2c(arg));
\end{verbatim}

\begin{verbatim}
[~/javascript/learning]$ ./f2c.js 100F
37.77777777777778C
[~/javascript/learning]$ ./f2c.js 
0C
\end{verbatim}
\end{enumerate}


\parrafo{index.html}
\begin{verbatim}
<html>
  <head>
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
     <title>CSV Analyzer</title>
     <link href="global.css" rel="stylesheet" type="text/css">

     <script type="text/javascript" src="../../underscore/underscore.js"></script>
     <script type="text/javascript" src="../../jquery/starterkit/jquery.js"></script>
     <script type="text/javascript" src="csv.js"></script>
  </head>
  <body>
    <h1>Comma Separated Value Analyzer</h1>
    <div>
      <i>Write a CSV string. Click the table button. The program outputs a table with the specified data.</i>
    </div>
    <table>
      <tr>
        <th>CSV string:</th> <!-- autofocus attribute is HTML5 -->
        <td><textarea autofocus cols = "80" rows = "5" id="original"></textarea></td> 
      </tr>
    </table>
    <button type="button">table:</button><br>
    <span class="output" id="finaltable"></span>
  </body>
</html>
\end{verbatim}

\parrafo{jQuery}

\htmladdnormallink{jQuery}{http://jquery.com/} (\htmladdnormallink{Descarga la librería}{http://jquery.com/download/})

\cei{jQuery} is a cross-platform JavaScript library designed to simplify
the client-side scripting of HTML. 

\begin{itemize}
\item
It was released in January 2006
at BarCamp NYC by John Resig. 

\item
It is currently developed by a team of
developers led by Dave Methvin. 

\item
jQuery is the most popular JavaScript library in
use today

\item
jQuery's syntax is designed to make it easier to navigate a document,
select DOM elements, create animations, handle events, and develop Ajax
applications. 

\item
The set of jQuery core features — DOM element selections, traversal
and manipulation — enabled by its selector engine (named "Sizzle"
from v1.3), created a new "programming style", fusing algorithms and
DOM-data-structures; and influenced the architecture of other JavaScript
frameworks like \wikip{YUI v3}{YUI\_Library} and \wikip{Dojo}{Dojo\_Toolkit}.
\item
\end{itemize}

\parrafo{How JQuery Works}

  \begin{itemize}
  \item
  Véase
  \htmladdnormallink{How jQuery Works}{http://learn.jquery.com/about-jquery/how-jquery-works/}
  \item
    \htmladdnormallink{https://github.com/crguezl/how-jquery-works-tutorial}{https://github.com/crguezl/how-jquery-works-tutorial} en GitHub
  \item
  \begin{verbatim}
  [~/javascript/jquery(master)]$ pwd -P
  /Users/casiano/local/src/javascript/jquery
  \end{verbatim}
  \end{itemize}

\begin{verbatim}
~/javascript/jquery(master)]$ cat index.html 
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Demo</title>
</head>
<body>
    <a href="http://jquery.com/">jQuery</a>
    <script src="starterkit/jquery.js"></script>
    <script>
 
    // Your code goes here.
 
    </script>
</body>
</html>
\end{verbatim}

To ensure that their code runs after the browser finishes loading the document, many JavaScript programmers wrap their code in an onload function:

\begin{verbatim}
window.onload = function() { alert( "welcome" ); }
\end{verbatim}

Unfortunately, the code doesn't run until all images are finished downloading, including banner ads. To run code as soon as the document is ready to be manipulated, jQuery has a statement known as the ready event:

\begin{verbatim}
$( document ).ready(function() {
    // Your code here.
});
\end{verbatim}
For \verb|click| and most other events, you can prevent the default
behavior by calling 
\htmladdnormallink{event.preventDefault()}{http://api.jquery.com/event.preventdefault/}
in the event handler.
If this method is called, the default action of the event will not be triggered.
For example, clicked anchors will not take the browser to a new URL.

\begin{verbatim}
[~/javascript/jquery(master)]$ cat index2.html 
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Demo</title>
</head>
<body>
    <a href="http://jquery.com/">jQuery</a>
    <script src="starterkit/jquery.js"></script>
    <script>
 
    $( document ).ready(function() {
        $( "a" ).click(function( event ) {
            alert( "The link will no longer take you to jquery.com" );
            event.preventDefault();
        });
    });
 
    </script>
</body>
</html>
\end{verbatim}
Borrowing from CSS 1–3, and then adding its own, jQuery offers a powerful set of tools for matching a set of elements in a document.

See jQuery \htmladdnormallink{Category: Selectors}{http://api.jquery.com/category/selectors/}.

Another common task is adding or removing a class.
jQuery also provides some handy effects.

\begin{verbatim}
[~/javascript/jquery(master)]$ cat index3.html 
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <style>
        a.test { font-weight: bold; }
    </style>
    <title>Demo</title>
</head>
<body>
    <a href="http://jquery.com/">jQuery</a>
    <script src="starterkit/jquery.js"></script>
    <script>
 
    $( document ).ready(function() {
        $( "a" ).click(function( event ) {
            $( "a" ).addClass( "test" );
            alert( "The link will no longer take you to jquery.com" );
            event.preventDefault();
            $( "a" ).removeClass( "test" );
            $( this ).hide( "slow" );
            $( this ).show( "slow" );
        });
    });
 
    </script>
</body>
</html>
\end{verbatim}
\begin{itemize}
\item
In JavaScript \verb|this| always refers to the {\it owner} of the function
we're executing, or rather, {\it to the object that a function is a method of}.

\item
When we define our function \verb|tutu()| in a page, its owner is the
page, or rather, the \verb|window| object (or \verb|global| object) of JavaScript. 

\item
An \verb|onclick| property, though, is owned by the HTML element it belongs to.

\item
The method
\htmladdnormallink{.addClass( className )}{http://api.jquery.com/addclass/}
adds the specified class(es) to each of the set of matched elements.

\verb|className| is a String containing 
one or more space-separated classes to be added to the class attribute of each matched element.

This method does not replace a class. It simply adds the class, appending
it to any which may already be assigned to the elements.
\item
The method \verb|.removeClass( [className ] )|
removes a single class, multiple classes, or all classes from each element in the set of matched elements.

If a class name is included as a parameter, then only that class will be
removed from the set of matched elements. If no class names are specified
in the parameter, all classes will be removed.

This method is often used with \verb|.addClass()| 
to switch elements' classes from one to another, like so:

\begin{verbatim}
$( "p" ).removeClass( "myClass noClass" ).addClass( "yourClass" );
\end{verbatim}

\end{itemize}


JavaScript enables you to freely
pass functions around to be executed at a later time. A \cei{callback} is a
function that is passed as an argument to another function and is usually 
executed
after its parent function has completed. 

Callbacks are special because
they wait to execute until their parent finishes or some event occurs. 

Meanwhile, the
browser can be executing other functions or doing all sorts of other work.
\begin{verbatim}
[~/javascript/jquery(master)]$ cat app.rb
require 'sinatra'

set :public_folder, File.dirname(__FILE__) + '/starterkit'

get '/' do
  erb :index
end

get '/chuchu' do
  if request.xhr?
    "hello world!"
  else 
    erb :tutu
  end
end

__END__

@@layout
  <!DOCTYPE html>
  <html>
    <head>
        <meta charset="utf-8" />
        <title>Demo</title>
    </head>
    <body>
        <a href="http://jquery.com/">jQuery</a>
        <div class="result"></div>
        <script src="jquery.js"></script>
        <%= yield %>
    </body>
  </html>

@@index
  <script>
  $( document ).ready(function() {
      $( "a" ).click(function( event ) {
          event.preventDefault();
          $.get( "/chuchu", function( data ) {
            $( ".result" ).html( data );
            alert( "Load was performed." );
          });
      });
  });
  </script>

@@tutu
  <h1>Not an Ajax Request!</h1>
\end{verbatim}

\begin{itemize}
\item \verb|jQuery.get( url [, data ] [, success(data, textStatus, jqXHR) ] [, dataType ] )|
load data from the server using a HTTP GET request.

\item \verb|url|

Type: String

A string containing the URL to which the request is sent.
\item \verb|data|

Type: PlainObject or String

A plain object or string that is sent to the server with the request.
\item \verb|success(data, textStatus, jqXHR)|

Type: Function()

A callback function that is executed if the request succeeds.
\item \verb|dataType|

Type: String

The type of data expected from the server. Default: Intelligent Guess 
(\verb|xml|, \verb|json|, \verb|script|, \verb|or| \verb|html|).
\end{itemize}

To use callbacks, it is important to know how to pass them into their parent function.


Executing callbacks with arguments can be tricky.

This code example will not work:

\begin{verbatim}
$.get( "myhtmlpage.html", myCallBack( param1, param2 ) );
\end{verbatim}
The reason this fails is that the code executes 

\begin{verbatim}
myCallBack( param1, param2) 
\end{verbatim}

immediately and then passes \verb|myCallBack()|'s return value as the second
parameter to \verb|$.get()|. 

We actually want to pass the function \verb|myCallBack|,
not \verb|myCallBack( param1, param2 )|'s return value (which might or might not
be a function). 

So, how to pass in \verb|myCallBack()| and include arguments?

To defer executing \verb|myCallBack()| with its parameters, you can use
an anonymous function as a wrapper.


\begin{verbatim}
[~/javascript/jquery(master)]$ cat app2.rb
require 'sinatra'

set :public_folder, File.dirname(__FILE__) + '/starterkit'

get '/' do
  erb :index
end

get '/chuchu' do
  if request.xhr? # is an ajax request
    "hello world!"
  else 
    erb :tutu
  end
end

__END__

@@layout
  <!DOCTYPE html>
  <html>
    <head>
        <meta charset="utf-8" />
        <title>Demo</title>
    </head>
    <body>
        <a href="http://jquery.com/">jQuery</a>
        <div class="result"></div>
        <script src="jquery.js"></script>
        <%= yield %>
    </body>
  </html>

@@tutu
  <h1>Not an Ajax Request!</h1>

@@index
  <script>
    var param = "chuchu param";
    var handler = function( data, textStatus, jqXHR, param ) {
      $( ".result" ).html( data );
      alert( "Load was performed.\n"+
             "$data = "+data+
             "\ntextStatus = "+textStatus+
             "\njqXHR = "+JSON.stringify(jqXHR)+
             "\nparam = "+param );
    };
    $( document ).ready(function() {
        $( "a" ).click(function( event ) {
            event.preventDefault();
            $.get( "/chuchu", function(data, textStatus, jqXHR ) {
              handler( data, textStatus, jqXHR, param);
            });
        });
    });
  </script>
\end{verbatim}
El ejemplo en \verb|app2.rb| puede verse desplegado en Heroku:
\htmladdnormallink{http://jquery-tutorial.herokuapp.com/}{http://jquery-tutorial.herokuapp.com/}

The
\htmladdnormallink{JSON.stringify() }{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify}
method converts a value to \tei{JSON}, optionally replacing values
if a \verb|replacer function| is specified, or optionally including only the
specified properties if a \verb|replacer array| is specified.

\verb|JSON.stringify(value[, replacer [, space]])|
\begin{itemize}
\item
\verb|value|

The value to convert to a JSON string.
\item
\verb|replacer|

  \begin{itemize}
  \item
  If a function, transforms values and properties encountered while stringifying; 
  \item
  if an array, specifies the set of properties included in objects in the final string.
  \end{itemize}

\item
\verb|space|

Causes the resulting string to be pretty-printed.
\end{itemize}


See another example of use in
\htmladdnormallink{http://jsfiddle.net/casiano/j7tsF/}{http://jsfiddle.net/casiano/j7tsF/}.
To learn to use JSFiddle wath the YouTube video 
\htmladdnormallink{How to use JSFiddle by Jason Diamond}{http://youtu.be/Iw4f-yRf7RU}

\parrafo{Underscore}

\htmladdnormallink{Underscore}{http://underscorejs.org/}:
is a utility-belt library for JavaScript that provides a
lot of the functional programming support that you would expect in
Ruby.

\begin{itemize}
\item
Underscore provides functions that support 
methods like: 

\verb|map|, \verb|select|, \verb|invoke|  

\item
as well as more specialized helpers:

function binding, javascript templating, deep equality testing, and so
on. 
\end{itemize}

\begin{itemize}
\item
Cargando la librería:
\begin{verbatim}
[~/javascript/jquery(master)]$ node
> 2+3
5
> _
5
> uu = require('underscore')
{ [Function]
  _: [Circular],
  VERSION: '1.5.2',
  forEach: [Function],
  each: [Function],
  collect: [Function],
  map: [Function],
  inject: [Function],
  reduce: [Function],
  .................
  chain: [Function] }
\end{verbatim}

\item \verb|each|:

\begin{verbatim}
> uu.each([1, 2, 3], function(x) { console.log(x*x); })
1
4
9
\end{verbatim}

\item
\verb|map|:
\begin{verbatim}
> uu.map([1, 2, 3], function(num){ return num * 3; })
[ 3, 6, 9 ]
\end{verbatim}
\item \verb|invoke|
\begin{verbatim}
> z = [[6,9,1],[7,3,9]]
[ [ 6, 9, 1 ], [ 7, 3, 9 ] ]
> uu.invoke(z, 'sort')
[ [ 1, 6, 9 ], [ 3, 7, 9 ] ]
> uu.invoke(z, 'sort', function(a, b) { return b-a; })
[ [ 9, 6, 1 ], [ 9, 7, 3 ] ]
\end{verbatim}
\item
\verb|reduce|:
\begin{verbatim}
> uu.reduce([1, 2, 3, 4], function(s, num){ return s + num; }, 0)
10
> uu.reduce([1, 2, 3, 4], function(s, num){ return s * num; }, 1)
24
> uu.reduce([1, 2, 3, 4], function(s, num){ return Math.max(s, num); }, -1)
4
> uu.reduce([1, 2, 3, 4], function(s, num){ return Math.min(s, num); }, 99)
1
\end{verbatim}

\item \verb|filter|: (\verb|select| is an alias for \verb|filter|)
\begin{verbatim}
> uu.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; })
[ 2, 4, 6 ]
\end{verbatim}
\item \verb|isEqual|
\begin{verbatim}
> a = {a:[1,2,3], b: { c: 1, d: [5,6]}}
{ a: [ 1, 2, 3 ],
  b: { c: 1, d: [ 5, 6 ] } }
> b = {a:[1,2,3], b: { c: 1, d: [5,6]}}
{ a: [ 1, 2, 3 ],
  b: { c: 1, d: [ 5, 6 ] } }
> a == b
false
> uu.isEqual(a,b)
true
\end{verbatim}
\item \verb|bind|
\begin{verbatim}
> func = function(greeting){ return greeting + ': ' + this.name }
[Function]
> func = uu.bind(func, {name: 'moe'})
[Function]
> func('hello')
'hello: moe'
> func = uu.bind(func, {name: 'moe'}, 'hi')
[Function]
> func()
'hi: moe'
> 
\end{verbatim}
\end{itemize}

\parrafo{Templates en Underscore}

\begin{itemize}
\item 
\htmladdnormallink{Underscore: template}{http://underscorejs.org/\#template}

\verb|_.template(templateString, [data], [settings])|

Compiles JavaScript templates into functions that can be evaluated for
rendering. Useful for rendering complicated bits of HTML from a JavaScript 
object or from \cei{JSON} data
sources.

JSON, or \cei{JavaScript Object Notation}, is an open standard format
that uses human-readable text to transmit data objects consisting of
attribute–value pairs. It is used primarily to transmit data between
a server and web application, as an alternative to XML.
Although originally derived from the JavaScript scripting language,
JSON is a language-independent data format, and code for parsing
and generating JSON data is readily available in a large variety of
programming languages.

\begin{itemize}
\item
Template functions can both interpolate variables, using 
\verb|<%= … %>|, 

\begin{verbatim}
> compiled = uu.template("hello: <%= name %>")
{ [Function]
  source: 'function(obj){
    var __t,__p=\'\', __j=Array.prototype.join, i
        print=function(){__p+=__j.call(arguments,\'\');};
    with(obj||{}){
      __p+=\'hello: \'+ ((__t=( name ))==null?\'\':__t)+ \'\';
    }
    return __p;
  }' 
}
> compiled({name: 'moe'})
'hello: moe'
\end{verbatim}
\item
as well as execute arbitrary JavaScript code, with 
\verb|<% … %>|. 

\begin{verbatim}
> uu = require('underscore')
> list = "\
... <% _.each(people, function(name) { %>\
..... <li><%= name %></li>\
... <% }); %>"
'<% _.each(people, function(name) { %> <li><%= name %></li> <% }); %>'
> uu.template(list, {people: ['moe', 'curly', 'larry']})
' <li>moe</li>  <li>curly</li>  <li>larry</li> '
\end{verbatim}

\item
When you evaluate a template function, pass in a data object
that has properties corresponding to the template's free variables. 

If
you're writing a one-off, like in the example above, 
you can pass the data object as the second
parameter to template in order to render immediately instead of returning
a template function. 
\item
If
you wish to interpolate a value, and have it be HTML-escaped, use 
\verb|<%- … %>| 

\begin{verbatim}
> template = uu.template("<b><%- value %></b>")
{ [Function]
  source: 'function(obj){
    var __t,__p=\'\',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,\'\');};
    with(obj||{}){
      __p+=\'<b>\'+
      ((__t=( value ))==null?\'\':_.escape(__t))+
      \'</b>\';
    }
    return __p;
  }' 
}
> template({value: '<script>'})
'<b>&lt;script&gt;</b>'
\end{verbatim}

\item
The \verb|settings| argument should be a hash containing
any \verb|_.templateSettings| that should be overridden.
\begin{verbatim}
_.template("Using 'with': <%= data.answer %>", {answer: 'no'}, {variable: 'data'});
=> "Using 'with': no"
\end{verbatim}
Another example:
\begin{verbatim}
template = uu.template("<b>{{ value }}</b>",{value: 4 },
                      { interpolate: /\{\{(.+?)\}\}/g })
'<b>4</b>'
\end{verbatim}
\end{itemize}

You can also use \verb|print| from within JavaScript code. This is sometimes
more convenient than using \verb|<%= ... %>|.

\begin{verbatim}
> compiled = uu.template("<% print('Hello ' + epithet); %>")
{ [Function]
  source: 'function(obj){\n
    var __t,__p=\'\',
        __j=Array.prototype.join,print=function(){
            __p+=__j.call(arguments,\'\');};\n
            with(obj||{}){\n
              __p+=\'\';\n print(\'Hello \' + epithet); \n
              __p+=\'\';\n}\n
              return __p;\n
  }' 
}
> compiled({ epithet : 'stooge' })
'Hello stooge'
> 
\end{verbatim}

If ERB-style delimiters aren't your cup of tea, you can change
Underscore's template settings to use different symbols to set off
interpolated code: 

\begin{itemize}
\item
Define an \verb|interpolate| regex to match expressions that
should be interpolated verbatim, 
\item
an \verb|escape| regex to match expressions
that should be inserted after being HTML escaped, and 
\item
an \verb|evaluate| regex
to match expressions that should be evaluated without insertion into
the resulting string. 
\item
You may define or omit any combination of the
three. 
\item
For example, to perform \verb|Mustache.js| style templating:

\begin{verbatim}
_.templateSettings = {
  interpolate: /\{\{(.+?)\}\}/g
};

var template = _.template("Hello {{ name }}!");
template({name: "Mustache"});
=> "Hello Mustache!"
\end{verbatim}
\item \verb|escape|:
\begin{verbatim}
> uu.templateSettings.escape = /\{\{-(.*?)\}\}/g
/\{\{-(.*?)\}\}/g
> compiled = uu.template("Escaped: {{- value }}\nNot escaped: {{ value }}")
{ [Function]
  source: 'function(obj){\nvar __t,__p=\'\',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,\'\');};\nwith(obj||{}){\n__p+=\'Escaped: \'+\n((__t=( value ))==null?\'\':_.escape(__t))+\n\'\\nNot escaped: {{ value }}\';\n}\nreturn __p;\n}' }
> compiled({value: 'Hello, <b>world!</b>'})
'Escaped: Hello, &lt;b&gt;world!&lt;/b&gt;\nNot escaped: {{ value }}'
\end{verbatim}
\item Another example:
\begin{verbatim}
> uu.templateSettings = {
.....       interpolate: /\<\@\=(.+?)\@\>/gim,
.....       evaluate: /\<\@(.+?)\@\>/gim
.....   }
{ interpolate: /\<\@\=(.+?)\@\>/gim,
  evaluate: /\<\@(.+?)\@\>/gim }
> s = " <@ _.each([0,1,2,3,4], function(i) { @>  <p><@= i @></p> <@ }); @>"
' <@ _.each([0,1,2,3,4], function(i) { @>  <p><@= i @></p> <@ }); @>'
> uu.template(s,{})
'   <p>0</p>   <p>1</p>   <p>2</p>   <p>3</p>   <p>4</p> '
\end{verbatim}
\end{itemize}
By default, template places the values from your data in the local scope
via the \verb|with| statement. The \verb'with' statement adds the given
object to the head of this scope chain during the evaluation of its
statement body:
\begin{verbatim}
> with (Math) {
... s = PI*2;
... }
6.283185307179586
> z = { x : 1, y : 2 }
{ x: 1, y: 2 }
> with (z) {
... console.log(y);
... }
2
undefined
\end{verbatim}

However, you can specify a single variable name
with the variable \verb|setting|. This improves the speed at
which a template is able to render.

\begin{verbatim}
_.template("Using 'with': <%= data.answer %>", {answer: 'no'}, {variable: 'data'});
=> "Using 'with': no"
\end{verbatim}


\item
\htmladdnormallink{JSFIDDLE: underscore templates}{http://jsfiddle.net/casiano/LS384/}
\item 
\htmladdnormallink{Stackoverflow::how to use Underscore template}{http://stackoverflow.com/questions/4778881/how-to-use-underscore-js-as-a-template-engine}

\end{itemize}

\parrafo{Content delivery network or content distribution network (CDN)}

Una CDN que provee \verb|underscore| esta en 
\htmladdnormallink{http://cdnjs.com/}{http://cdnjs.com/}:
\begin{verbatim}
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
\end{verbatim}

A content delivery network or content distribution network (CDN) is a
large distributed system of servers deployed in multiple data centers
across the Internet. The goal of a CDN is to serve content to end-users
with high availability and high performance. CDNs serve a large fraction
of the Internet content today, including 
\begin{itemize}
\item
web objects (text, graphics and scripts), 
\item
downloadable objects (media files, software, documents), applications (e-commerce, portals), 
\item
live streaming media, on-demand
streaming media, and social networks.
\end{itemize}

Google provee también un servicio CDN para los desarrolladores en
\htmladdnormallink{https://developers.google.com/speed/libraries/devguide}{https://developers.google.com/speed/libraries/devguide}.


\parrafo{textarea, autofocus y button}
\begin{enumerate}

\item \htmladdnormallink{textarea}{http://www.w3schools.com/tags/tag_textarea.asp}:

The \verb|<textarea>| tag defines a multi-line text input control.

A \cei{text area} can hold an unlimited number of characters, and the text
renders in a fixed-width font (usually Courier).

The size of a text area can be specified by the \verb|cols| and \verb|rows| 
attributes, or through CSS' \verb|height| and \verb|width| properties.

\verb|cols| and \verb|rows| consider the font size. 
\verb|height| and \verb|width| aren't.

\item \htmladdnormallink{autofocus}{http://www.w3api.com/wiki/HTML5:INPUT.autofocus}.

The autofocus attribute is a boolean attribute.

When present, it specifies that the text area should automatically get focus when the page loads.

Véase también \cite{pilgrimhtml5}

\item \htmladdnormallink{button}{http://www.w3schools.com/tags/tag_button.asp}:

The \verb|<button>| tag defines a clickable button.

Inside a \verb|<button>| element you can put content, like text or images. 

\end{enumerate}

\parrafo{Local Storage (HTML5 Web Storage)}

\cei{Web storage} and \cei{DOM storage} 
(document object model) are web application
software methods and protocols used for storing data in a web browser. 

\begin{itemize}
\item
Web storage supports persistent data storage, similar to cookies but with
a greatly enhanced capacity and no information stored in the HTTP
request header.

\item
Local Storage nos permite almacenar hasta 5MB del lado del cliente
por dominio, esto nos permite ahora hacer aplicaciones mas robustas y
con mas posibilidades. Las Cookies ofrecen algo
parecido, pero con el limite de 100kb.

\item
There are two main web storage types: \cei{local storage}
and \cei{session storage}, behaving similarly to persistent cookies and session
cookies respectively.
\item
Unlike cookies, which can be accessed by both the server and client side, web storage falls exclusively under the purview of client-side scripting
\item
The HTML5 localStorage object is isolated per domain (the same segregation rules as the \wikip{same origin policy}{Same\_origin\_policy}).

The same-origin policy permits scripts running on pages originating from the same
site – a combination of scheme, hostname, and port number – to access
each other's DOM with no specific restrictions, but prevents access to
DOM on different sites.
\end{itemize}

Véase:
\begin{itemize}
\item
Ejemplo en  GitHub:
\htmladdnormallink{https://github.com/crguezl/web-storage-example}{https://github.com/crguezl/web-storage-example}
\begin{verbatim}
[~/javascript/local_storage(master)]$ pwd -P
/Users/casiano/local/src/javascript/local_storage
\end{verbatim}
\item 
\htmladdnormallink{Como usar localstorage}{http://html5facil.com/tutoriales/como-usar-local-storage-de-javascript}

\item 
\htmladdnormallink{HTML5 Web Storage}{http://www.w3schools.com/html/html5_webstorage.asp}
\item
\htmladdnormallink{W3C Web Storage}{http://www.w3.org/TR/webstorage/}
\item
\htmladdnormallink{Using HTML5 localStorage To Store JSON}{http://getfishtank.ca/blog/using-html5-localstorage-to-store-json}
Options for persistent storage of complex JavaScript objects in HTML5
by Dan Cruickshank
\item
\htmladdnormallink{HTML5 Cookbook.  Christopher Schmitt, Kyle Simpson "O'Reilly Media, Inc.", Nov 7, 2011}{http://books.google.es/books/about/HTML5_Cookbook.html?id=cXcaY7XVZbcC&redir_esc=y}
Chapter 10. Section 2: LocalStorage
\end{itemize}

While Chrome does not provide a UI for clearing localStorage, there is an API that will either clear a specific key or the entire localStorage object on a website.

\begin{verbatim}
//Clears the value of MyKey
window.localStorage.clear("MyKey");

//Clears all the local storage data
window.localStorage.clear();
\end{verbatim}
Once done, localStorage will be cleared. Note that this affects
all web pages on a single domain, so if you clear localStorage for
\verb|jsfiddle.net/index.html| (assuming that's the page you're on), then it
clears it for all other pages on that site. 

\parrafo{global.css}
\begin{verbatim}
html *
{
   font-size: large; 
   /* The !important ensures that nothing can override what you've set in this style (unless it is also important). */
   font-family: Arial;
}

h1            { text-align: center; font-size: x-large; }
th, td        { vertical-align: top; text-align: right; }   
/* #finaltable  * { color: white; background-color: black; }   */

/* #finaltable table { border-collapse:collapse; } */
/* #finaltable table, td { border:1px solid white; } */
#finaltable:hover td { background-color: blue; } 
tr:nth-child(odd)    { background-color:#eee; }
tr:nth-child(even)    { background-color:#00FF66; }
input        { text-align: right;  border: none;       }     /* Align input to the right  */
textarea     { border: outset; border-color: white;       }                        
table        { border: inset; border-color: white; }
table.center { margin-left:auto; margin-right:auto; }
#result      { border-color: red; }
tr.error       { background-color: red; }
body
{
 background-color:#b0c4de;  /* blue */
}
\end{verbatim}

\begin{enumerate}
\item 
\htmladdnormallink{Introducción a las pseudo clases de CSS3}{http://www.genbetadev.com/desarrollo-web/introduccion-a-las-pseudo-clases-de-css3}

Una pseudo clase es un estado o uso predefinido de un elemento al
que se le puede aplicar un estilo independientemente de su estado por
defecto. Existen cuatro tipos diferentes de pseudo clases:
\begin{itemize}
\item
Links: Estas pseudo clases se usan para dar estilo al enlace tanto en
su estado normal por defecto como cuando ya ha sido visitado, mientras
mantenemos el cursor encima de él o cuando hacemos click en él
\item
Dinamicas: Estas pseudo clases pueden ser aplicadas a cualquier elemento
para definir como se muestran cuando el cursor está situado sobre ellos,
o haciendo click en ellos o bien cuando son seleccionados
\item
Estructurales: Permiten dar estilo a elementos basándonos en una
posición numérica exacta del elemento
\item
Otras: Algunos elementos pueden ser estilizados de manera diferente
basándonos en el lenguaje o que tipo de etiqueta no son
\end{itemize}

\item 
\htmladdnormallink{CSS pattern matching}{http://www.w3.org/TR/CSS2/selector.html\#pattern-matching}

In CSS, \cei{pattern matching} rules determine which style rules apply
to elements in the document tree. 
These patterns, called selectors,
may range from simple element names to rich contextual patterns. If all
conditions in the pattern are true for a certain element, the selector
matches the element.

The universal selector, written \verb"*", matches the name of any element
type. It matches any single element in the document tree.

For example,
this rule set will be applied to every element in a document:
\begin{verbatim}
* {
  margin: 0;
  padding: 0;
}
\end{verbatim}
\item 
\htmladdnormallink{CSS class selectors}{http://www.w3.org/TR/CSS2/selector.html\#class-html}

Working with HTML, authors may use the period (\verb|.|) notation
as an alternative to the \verb|~=| notation when representing the class
attribute. Thus, for HTML, \verb|div.value| and \verb|div[class~=value]| have the same
meaning. The attribute value must immediately follow the {\it period} (\verb|.|).

\item 
\htmladdnormallink{CSS3: nth-child() selector}{http://www.w3schools.com/cssref/sel_nth-child.asp}
The \verb|:nth-child(n)| selector matches every element that is the \verb|n|th 
child, regardless of type, of its parent.

\verb|n| can be a number, a keyword, or a formula.

\item 

The CSS border properties allow you to specify the style and color of an element's border.
The border-style property specifies what kind of border to display.
For example, \verb|inset:| Defines a 3D inset border
while \verb|:outset| defines a 3D outset border. 
The effect depends on the border-color value

See 
\htmladdnormallink{CSS: border}{http://www.tizag.com/cssT/border.php}

\item 
\end{enumerate}


\parrafo{csv.js}


  \begin{latexonly}
    \begin{verbatim}

// See http://en.wikipedia.org/wiki/Comma-separated_values
"use strict"; // Use ECMAScript 5 strict mode in browsers that support it

$(document).ready(function() {
   $("button").click(function() {
     calculate();
   });
 });

function calculate() {
  var result;
  var original       = document.getElementById("original");
  var temp = original.value;
  var regexp = /_____________________________________________/g;
  var lines = temp.split(/\n+\s*/);
  var commonLength = NaN;
  var r = [];
  // Template using underscore
  var row = "<%% _.each(items, function(name) { %>"     +
            "                    <td><%%= name %></td>" +
            "              <%% }); %>";

  if (window.localStorage) localStorage.original  = temp;
  
  for(var t in lines) {
    var temp = lines[t];
    var m = temp.match(regexp);
    var result = [];
    var error = false;
    
    if (m) {
      if (commonLength && (commonLength != m.length)) {
        //alert('ERROR! row <'+temp+'> has '+m.length+' items!');
        error = true;
      }
      else {
        commonLength = m.length;
        error = false;
      }
      for(var i in m) {
        var removecomma = m[i].replace(/,\s*$/,'');
        var remove1stquote = removecomma.replace(/^\s*"/,'');
        var removelastquote = remove1stquote.replace(/"\s*$/,'');
        var removeescapedquotes = removelastquote.replace(/\"/,'"');
        result.push(removeescapedquotes);
      }
      var tr = error? '<tr class="error">' : '<tr>';
      r.push(tr+_.template(row, {items : result})+"</tr>");
    }
    else {
      alert('ERROR! row '+temp+' does not look as legal CSV');
      error = true;
    }
  }
  r.unshift('<p>\n<table class="center" id="result">');
  r.push('</table>');
  //alert(r.join('\n')); // debug
  finaltable.innerHTML = r.join('\n');
}

window.onload = function() {
  // If the browser supports localStorage and we have some stored data
  if (window.localStorage && localStorage.original) {
    document.getElementById("original").value = localStorage.original;
  }
};

    \end{verbatim}
  \end{latexonly}
    \begin{rawhtml}
    <pre>
<span class="c1">// See http://en.wikipedia.org/wiki/Comma-separated_values</span>
<span class="s2">&quot;use strict&quot;</span><span class="p">;</span> <span class="c1">// Use ECMAScript 5 strict mode in browsers that support it</span>

<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;button&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
     <span class="nx">calculate</span><span class="p">();</span>
   <span class="p">});</span>
 <span class="p">});</span>

<span class="kd">function</span> <span class="nx">calculate</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">result</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">original</span>       <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;original&quot;</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">original</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">regexp</span> <span class="o">=</span> <span class="sr">/_____________________________________________/g</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">lines</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\n+\s*/</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">commonLength</span> <span class="o">=</span> <span class="kc">NaN</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="c1">// Template using underscore</span>
  <span class="kd">var</span> <span class="nx">row</span> <span class="o">=</span> <span class="s2">&quot;&lt;%% _.each(items, function(name) { %&gt;&quot;</span>     <span class="o">+</span>
            <span class="s2">&quot;                    &lt;td&gt;&lt;%%= name %&gt;&lt;/td&gt;&quot;</span> <span class="o">+</span>
            <span class="s2">&quot;              &lt;%% }); %&gt;&quot;</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">)</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">original</span>  <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
  
  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">t</span> <span class="k">in</span> <span class="nx">lines</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">temp</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">t</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">regexp</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">var</span> <span class="nx">error</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">commonLength</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">commonLength</span> <span class="o">!=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">))</span> <span class="p">{</span>
        <span class="c1">//alert(&#39;ERROR! row &lt;&#39;+temp+&#39;&gt; has &#39;+m.length+&#39; items!&#39;);</span>
        <span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="nx">commonLength</span> <span class="o">=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
        <span class="nx">error</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">removecomma</span> <span class="o">=</span> <span class="nx">m</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/,\s*$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">remove1stquote</span> <span class="o">=</span> <span class="nx">removecomma</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s*&quot;/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">removelastquote</span> <span class="o">=</span> <span class="nx">remove1stquote</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&quot;\s*$/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">removeescapedquotes</span> <span class="o">=</span> <span class="nx">removelastquote</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\&quot;/</span><span class="p">,</span><span class="s1">&#39;&quot;&#39;</span><span class="p">);</span>
        <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">removeescapedquotes</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="kd">var</span> <span class="nx">tr</span> <span class="o">=</span> <span class="nx">error</span><span class="o">?</span> <span class="s1">&#39;&lt;tr class=&quot;error&quot;&gt;&#39;</span> <span class="o">:</span> <span class="s1">&#39;&lt;tr&gt;&#39;</span><span class="p">;</span>
      <span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">tr</span><span class="o">+</span><span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">row</span><span class="p">,</span> <span class="p">{</span><span class="nx">items</span> <span class="o">:</span> <span class="nx">result</span><span class="p">})</span><span class="o">+</span><span class="s2">&quot;&lt;/tr&gt;&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;ERROR! row &#39;</span><span class="o">+</span><span class="nx">temp</span><span class="o">+</span><span class="s1">&#39; does not look as legal CSV&#39;</span><span class="p">);</span>
      <span class="nx">error</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">r</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;\n&lt;table class=&quot;center&quot; id=&quot;result&quot;&gt;&#39;</span><span class="p">);</span>
  <span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;&lt;/table&gt;&#39;</span><span class="p">);</span>
  <span class="c1">//alert(r.join(&#39;\n&#39;)); // debug</span>
  <span class="nx">finaltable</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// If the browser supports localStorage and we have some stored data</span>
  <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">localStorage</span> <span class="o">&amp;&amp;</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">original</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;original&quot;</span><span class="p">).</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">original</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
    </pre>
    \end{rawhtml}
  

\begin{enumerate}
\item 
\htmladdnormallink{Tutorials:Getting Started with jQuery}{http://docs.jquery.com/Tutorials:Getting_Started_with_jQuery}
\end{enumerate}

\parrafo{Tareas}

\begin{itemize}
\item
Añada pruebas usando Mocha y Chai
\end{itemize}


\section{Comentarios y Consejos}

\parrafo{How can I push a local Git branch to a remote with a different name easily?}

\begin{verbatim}
$ git branch -a
* gh-pages
  remotes/origin/HEAD -> origin/gh-pages
  remotes/origin/gh-pages
\end{verbatim}
Of course a solution for this way to work is to rename your master branch:
\begin{verbatim}
$ git branch -m master gh-pages
[~/Downloads/tmp(gh-pages)]$ git branch 
* gh-pages
\end{verbatim}

Otherwise, you can 
do your initial push this way:
\begin{verbatim}
$ git push -u origin master:gh-pages
\end{verbatim}
Option \verb|-u|: for every branch that is up to date or successfully pushed, add 
\verb|upstream| (tracking) reference, used by argument-less \verb|git-pull|.

It is convenient to also set \verb|push.default|:
\begin{verbatim}
$ git config push.default upstream
\end{verbatim}
\verb|push.default| defines the action git push should take if no 
\verb|refspec| is explicitly given.

\begin{itemize}
\item
\verb|nothing| do not \verb|push| anything (error out) unless a \verb|refspec| is explicitly
given. 
\item
verb|current|  \verb|push| the current branch to update a branch with the same name on
the receiving end.
\item
\verb|upstream| \verb|push| the current branch back to the branch whose changes are
usually integrated into the current branch
\item
\verb|simple| work like \verb|upstream| with an added safety
to refuse to \verb|push| if the \verb|upstream| branch's name is different from the local
one.
\end{itemize}


\begin{itemize}
\item
\htmladdnormallink{How can I push a local Git branch to a remote with a different name easily?}{http://stackoverflow.com/questions/5738797/how-can-i-push-a-local-git-branch-to-a-remote-with-a-different-name-easily}
\end{itemize}

\parrafo{favicons y shortcut icons}

\begin{itemize}
\item
A \cei{favicon} (short for \cei{Favorite icon}), also known as a \cei{shortcut} 
icon, is a file containing one or more small icons, 
most commonly 16×16 pixels, associated with a particular
Web site or Web page.
\item
A web designer can create such an icon and
install it into a Web site (or Web page) by several means, and graphical
web browsers will then make use of it. 
\item
Browsers that provide favicon
support typically display a page's favicon in the browser's address bar
(sometimes in the history as well) and next to the page's name in a
list of bookmarks.
\item
Browsers that support a tabbed document interface
typically show a page's favicon next to the page's title on the tab
\item
Some services in the cloud to generate favicons:
  \begin{itemize}
  \item
  \htmladdnormallink{Favicon Generator}{http://favicon-generator.org/}
  \item
  \htmladdnormallink{favicon.cc}{http://www.favicon.cc/}
  \end{itemize}
\item
En \verb|index.html| poner una línea como una de estas:
\begin{verbatim}
<link rel="shortcut icon" href="etsiiull.png" type="image/x-icon"> 
<link rel="shortcut icon" href="logo.png" /> 
<link href="images/favicon.ico" rel="icon" type="image/x-icon" />
\end{verbatim}
\end{itemize}

\section{Ejercicios}
\label{section:ejercicioslastindex}
\begin{enumerate}
\item  Paréntesis:
\begin{verbatim}
> str = "John Smith"
'John Smith'
> newstr = str.replace(re, "$2, $1")
'Smith, John'
\end{verbatim}
\item  El método \verb|exec|.

If your regular expression uses the \verb"g" flag, you can use the \verb|exec|
method multiple times to find successive matches in the same string.
When you do so, the search starts at the substring of str specified
by the regular expression's \verb|lastIndex| property.

\begin{verbatim}
> re = /d(b+)(d)/ig
/d(b+)(d)/gi
> z = "dBdxdbbdzdbd"
'dBdxdbbdzdbd'
> result = re.exec(z)
[ 'dBd', 'B', 'd', index: 0, input: 'dBdxdbbdzdbd' ]
> re.lastIndex
3
> result = re.exec(z)
[ 'dbbd', 'bb', 'd', index: 4, input: 'dBdxdbbdzdbd' ]
> re.lastIndex
8
> result = re.exec(z)
[ 'dbd', 'b', 'd', index: 9, input: 'dBdxdbbdzdbd' ]
> re.lastIndex
12
> z.length
12
> result = re.exec(z)
null
\end{verbatim}
\item JavaScript tiene lookaheads:
\begin{verbatim}
> x = "hello"
'hello'
> r = /l(?=o)/
/l(?=o)/
> z = r.exec(x)
[ 'l', index: 3, input: 'hello' ]
\end{verbatim}
\item JavaScript no tiene lookbehinds:
\begin{verbatim}
> x = "hello"
'hello'
> r = /(?<=l)l/
SyntaxError: Invalid regular expression: /(?<=l)l/: Invalid group
> .exit
\end{verbatim}
\begin{verbatim}
[~/Dropbox/src/javascript/PLgrado/csv(master)]$ irb
ruby-1.9.2-head :001 > x = "hello"
 => "hello" 
ruby-1.9.2-head :002 > r = /(?<=l)l/
 => ll 
ruby-1.9.2-head :008 > x =~ r
 => 3 
ruby-1.9.2-head :009 > $&
 => "l" 
\end{verbatim}
\item 
El siguiente ejemplo comprueba la validez de números de teléfono:
\begin{verbatim}
[~/local/src/javascript/PLgrado/regexp]$ pwd -P
/Users/casiano/local/src/javascript/PLgrado/regexp
[~/local/src/javascript/PLgrado/regexp]$ cat phone.html
<!DOCTYPE html>
<html>  
  <head>  
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">  
    <meta http-equiv="Content-Script-Type" content="text/javascript">  
    <script type="text/javascript">  
      var re = /\(?\d{3}\)?([-\/\.])\d{3}\1\d{4}/;  
      function testInfo(phoneInput){  
        var OK = re.exec(phoneInput.value);  
        if (!OK)  
          window.alert(RegExp.input + " isn't a phone number with area code!");  
        else
          window.alert("Thanks, your phone number is " + OK[0]);  
      }  
    </script>  
  </head>  
  <body>  
    <p>Enter your phone number (with area code) and then click "Check".
        <br>The expected format is like ###-###-####.</p>
    <form action="#">  
      <input id="phone"><button onclick="testInfo(document.getElementById('phone'));">Check</button>
    </form>  
  </body>  
</html>
\end{verbatim}
\item 
¿Con que cadenas casa  la expresión regular \verb|/^(11+)\1+$/|?
\begin{verbatim}
> '1111'.match(/^(11+)\1+$/) # 4 unos
[ '1111',
  '11',
  index: 0,
  input: '1111' ]
> '111'.match(/^(11+)\1+$/) # 3 unos
null
> '11111'.match(/^(11+)\1+$/) # 5 unos
null
> '111111'.match(/^(11+)\1+$/) # 6 unos
[ '111111',
  '111',
  index: 0,
  input: '111111' ]
> '11111111'.match(/^(11+)\1+$/) # 8 unos
[ '11111111',
  '1111',
  index: 0,
  input: '11111111' ]
> '1111111'.match(/^(11+)\1+$/)
null
> 
\end{verbatim}

\item

Busque  una solución al siguiente ejercicio 
(véase 'Regex to add space after punctuation sign' en \perlmonk{319742})
Se quiere poner un espacio en blanco después de la aparición de cada coma:
\begin{verbatim}
> x = "a,b,c,1,2,d, e,f"
'a,b,c,1,2,d, e,f'
> x.replace(/,/g,", ")
'a, b, c, 1, 2, d,  e, f'
\end{verbatim}
pero se quiere que la sustitución no tenga lugar si la coma esta incrustada entre
dos dígitos. Además se pide que si hay ya un espacio después de la coma,
no se duplique.

\begin{enumerate}
\item 
La siguiente solución logra el segundo objetivo, pero estropea los números:
\begin{verbatim}
> x = "a,b,c,1,2,d, e,f"
'a,b,c,1,2,d, e,f'
> x.replace(/,(\S)/g,", $1")
'a, b, c, 1, 2, d, e, f'
\end{verbatim}
\item 
Esta  otra funciona bien con los números pero no con los espacios ya existentes:
\begin{verbatim}
> x = "a,b,c,1,2,d, e,f"
'a,b,c,1,2,d, e,f'
> x.replace(/,(\D)/g,", $1")
'a, b, c,1,2, d,  e, f'
\end{verbatim}
\item 
Explique cuando casa esta expresión regular:
\begin{verbatim}
> r = /(\d[,.]\d)|(,(?=\S))/g
/(\d[,.]\d)|(,(?=\S))/g
\end{verbatim}
Aproveche que el método \verb|replace| puede recibir como segundo argumento
una función (vea \htmladdnormallink{replace}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/replace}):
\begin{verbatim}
> z = "a,b,1,2,d, 3,4,e"
'a,b,1,2,d, 3,4,e'
> f = function(match, p1, p2, offset, string) { return (p1 || p2 + " "); }
[Function]
> z.replace(r, f)
'a, b, 1,2, d, 3,4, e'
\end{verbatim}
\end{enumerate}
\end{enumerate}

\sectionpractica{Palabras Repetidas}

Se trata de producir una salida en las que las palabras repetidas consecutivas sean reducidas a una sola aparición.
Rellena las partes que faltan.

\parrafo{Donde}

\begin{verbatim}
[~/srcPLgrado/repeatedwords(master)]$ pwd -P
/Users/casiano/local/src/javascript/PLgrado/repeatedwords
[~/srcPLgrado/repeatedwords(master)]$ git remote -v
origin  ssh://git@bitbucket.org/casiano/pl-grado-repeated-words.git (fetch)
origin  ssh://git@bitbucket.org/casiano/pl-grado-repeated-words.git (push)
\end{verbatim}

Véase:
\htmladdnormallink{https://bitbucket.org/casiano/pl-grado-repeated-words}{https://bitbucket.org/casiano/pl-grado-repeated-words}

\parrafo{Ejemplo de ejecución}

%\begin{figure}[htb]
%\begin{center}
%\ includegraphics[scale=0.5]{chapter2/repeated_words.png}
%\end{center}
%\label{figure:csv}
%\caption{Ejemplo de pantalla de La aplicación para el Análisis de Datos en Formato CSV}
%\end{figure}


\begin{rawhtml}
<DIV ALIGN="CENTER"><A NAME="figure:csv"></A><A NAME="1213"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figura:</STRONG>
Ejemplo de pantalla de La aplicación para Repeated Words</CAPTION>
<TR><TD><IMG
 WIDTH="769" HEIGHT="410" BORDER="0"
 SRC="repeated_words.png"
 ALT=""
\end{rawhtml}

\parrafo{Estructura}

\begin{rawhtml}
<pre>
[~/Dropbox/src/javascript/PLgrado/repeatedwords(master)]$  tree --charset utf-8 
.
├── README
├── global.css
├── index.html
├── input.txt
├── input2.txt
├── inputhtml1.txt
└── repeated_words.js

0 directories, 7 files
</pre>
\end{rawhtml}

\parrafo{index.html}
\begin{verbatim}
[~/Dropbox/src/javascript/PLgrado/repeatedwords(master)]$ cat index.html 
<html>
  <head>
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
     <title>File Input</title>
     <link href="global.css" rel="stylesheet" type="text/css">

     <script type="text/javascript" src="../../underscore/underscore.js"></script>
     <script type="text/javascript" src="../../jquery/starterkit/jquery.js"></script>
     <script type="text/javascript" src="repeated_words.js"></script>
  </head>
  <body>
    <h1>File Input</h1>
    <input type="file" id="fileinput" />
    <div id="out" class="hidden">
    <table>
      <tr><th>Original</th><th>Transformed</th></tr>
      <tr>
        <td>
          <pre class="input" id="initialinput"></pre>
        </td>
        <td>
          <pre class="output" id="finaloutput"></pre>
        </td>
      </tr>
    </table>
    </div>
  </body>
</html>
\end{verbatim}

\begin{enumerate}
\item 
\htmladdnormallink{Tag input}{http://www.w3.org/TR/html-markup/input.file.html}
\end{enumerate}
\parrafo{global.css}

Rellena los estilos para \verb|hidden| y \verb|unhidden|:
\begin{verbatim}
[~/Dropbox/src/javascript/PLgrado/repeatedwords(master)]$ cat global.css 
html *
{
   font-size: large; 
   /* The !important ensures that nothing can override what you've set in this style 
      (unless it is also important). */
   font-family: Arial;
}

.thumb {
    height: 75px;
    border: 1px solid #000;
    margin: 10px 5px 0 0;
  }

h1            { text-align: center; font-size: x-large; }
th, td        { vertical-align: top; text-align: right; }   
/* #finaltable  * { color: white; background-color: black; }   */

/* #finaltable table { border-collapse:collapse; } */
/* #finaltable table, td { border:1px solid white; } */
#finaltable:hover td { background-color: blue; } 
tr:nth-child(odd)    { background-color:#eee; }
tr:nth-child(even)    { background-color:#00FF66; }
input        { text-align: right;  border: none;       }     /* Align input to the right  */
textarea     { border: outset; border-color: white;       }                        
table        { border: inset; border-color: white; }
.hidden      { display: ____; }
.unhidden    { display: _____; }
table.center { margin-left:auto; margin-right:auto; }
#result      { border-color: red; }
tr.error       { background-color: red; }
pre.output   { background-color: white; }
span.repeated { background-color: red }

body
{
 background-color:#b0c4de;  /* blue */
\end{verbatim}

\begin{enumerate}
\item 
\htmladdnormallink{CSS display Property}{http://www.w3schools.com/cssref/pr_class_display.asp}
\item 
\htmladdnormallink{Diferencias entre "Display" y "Visibility"}{http://www.luiscanada.com/manualCSS/css-display-visibility.php}
\end{enumerate}
\parrafo{repeated\_words.js}

Rellena las expresiones regulares que faltan:
\begin{verbatim}
[~/srcPLgrado/repeatedwords(master)]$ cat repeated_words.js 
"use strict"; // Use ECMAScript 5 strict mode in browsers that support it

$(document).ready(function() {
   $("#fileinput").change(calculate);
});

function generateOutput(contents) {
  return contents.replace(/____________________/__,'__________________________________');
}

function calculate(evt) {
  var f = evt.target.files[0]; 
  var contents = '';

  if (f) {
    var r = new FileReader();
    r.onload = function(e) { 
      contents = e.target.result;
      var escaped  = escapeHtml(contents);
      var outdiv = document.getElementById("out");
      outdiv.className = 'unhidden';
      finaloutput.innerHTML = generateOutput(escaped);
      initialinput.innerHTML = escaped;

    }
    r.readAsText(f);
  } else { 
    alert("Failed to load file");
  }
}

var entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

function escapeHtml(string) {
  return String(string).replace(/_________/g, function (s) {
    return ____________;
  });
\end{verbatim}

\begin{enumerate}
\item 
\htmladdnormallink{jQuery event.target}{http://api.jquery.com/event.target/}
\item 
\htmladdnormallink{HTML 5 File API}{http://www.w3.org/TR/FileAPI/}
\item 
\htmladdnormallink{HTML 5 File API: FileReader}{http://www.w3.org/TR/FileAPI/\#dfn-filereader}
\item 
\htmladdnormallink{HTML 5 File API: FileReader}{http://www.w3.org/TR/FileAPI/\#dfn-filereader}
\item 
\htmladdnormallink{element.className}{https://developer.mozilla.org/en-US/docs/DOM/element.className}
\item 
\htmladdnormallink{HTML Entities}{http://www.w3schools.com/html/html_entities.asp}
\item 
\htmladdnormallink{Tutorials:Getting Started with jQuery}{http://docs.jquery.com/Tutorials:Getting_Started_with_jQuery}
\item 
\htmladdnormallink{Underscore: template}{http://underscorejs.org/\#template}
\end{enumerate}

\parrafo{Ficheros de Entrada}
\begin{verbatim}
[~/Dropbox/src/javascript/PLgrado/repeatedwords(master)]$ cat input2.txt 
habia una vez 
vez un viejo viejo
hidalgo que vivia 
vivia
[~/Dropbox/src/javascript/PLgrado/repeatedwords(master)]$ cat input.txt 
one one
nothing rep
is two three
three four
[~/Dropbox/src/javascript/PLgrado/repeatedwords(master)]$ cat inputhtml1.txt 
habia => una vez 
vez & un viejo viejo <puchum>
hidalgo  & <pacham> que vivia 
vivia </que se yo>

\end{verbatim}

\section{Ejercicios}
El formato  \cei{INI} es un formato estandar 
para la escritura de ficheros de configuración. 
Su estrucutra básica se compone de
"secciones" y "propiedades". Véase la entrada de la wikipedia
\wikip{INI}{INI\_file}.
\begin{verbatim}
; last modified 1 April 2001 by John Doe
[owner]
name=John Doe
organization=Acme Widgets Inc.
 
[database]
; use IP address in case network name resolution is not working
server=192.0.2.62     
port=143
file = "payroll.dat"
\end{verbatim}
\begin{enumerate}
\item 
Escriba un programa javascript que obtenga las cabeceras de sección de un fichero 
INI
\item 
Escriba un programa javascript que case con los bloques de un fichero INI (cabecera mas lista de pares \verb|parámetro=valor|)

\item 
Se quieren obtener todos los pares nombre-valor, usando paréntesis con memoria para capturar cada parte.

%  Match INI section headers page 472
%  Match INI section blocks
%  Match INI name-value pairs
%  practica: INI configuration files
\item  ¿Que casa con cada paréntesis en esta regexp para los  pares nombre-valor?
\begin{verbatim}
> x = "h     = 4"
> r = /([^=]*)(\s*)=(\s*)(.*)/
> r.exec(x)
>
\end{verbatim}
\end{enumerate}

\section{Ejercicios}

\begin{enumerate}
\item 
Escriba una expresión regular que reconozca las cadenas de doble comillas.
Debe permitir la presencia de comillas y caracteres escapados.
\item 
¿Cual es la salida?
\begin{verbatim}
> "bb".match(/b|bb/)

> "bb".match(/bb|b/)

\end{verbatim}

\end{enumerate}

\sectionpractica{Ficheros INI}

\parrafo{Donde}
\begin{verbatim}
[~/srcPLgrado/ini(develop)]$ pwd -P
/Users/casiano/local/src/javascript/PLgrado/ini
[~/srcPLgrado/ini(develop)]$ git remote -v
origin  ssh://git@bitbucket.org/casiano/pl-grado-ini-files.git (fetch)
origin  ssh://git@bitbucket.org/casiano/pl-grado-ini-files.git (push)
\end{verbatim}

Véase
\htmladdnormallink{https://bitbucket.org/casiano/pl-grado-ini-files/src}{https://bitbucket.org/casiano/pl-grado-ini-files/src}.
\parrafo{index.html}
\begin{verbatim}
<html>
  <head>
     <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
     <title>INI files</title>
     <link href="global.css" rel="stylesheet" type="text/css">

     <script type="text/javascript" src="../../underscore/underscore.js"></script>
     <script type="text/javascript" src="../../jquery/starterkit/jquery.js"></script>
     <script type="text/javascript" src="______"></script>
  </head>
  <body>
    <h1>INI files</h1>
    <input type="file" id="_________" />
    <div id="out" class="hidden">
    <table>
      <tr><th>Original</th><th>Tokens</th></tr>
      <tr>
        <td>
          <pre class="input" id="____________"></pre>
        </td>
        <td>
          <pre class="output" id="___________"></pre>
        </td>
      </tr>
    </table>
    </div>
  </body>
</html>
\end{verbatim}

\parrafo{Ficheros}

Vease
\begin{itemize}
\item
\htmladdnormallink{Reading files in JavaScript using the File APIs}{http://www.html5rocks.com/en/tutorials/file/dndfiles/}
by Eric Bidelman.

Source code in 
\htmladdnormallink{files-in-javascript-tut}{https://github.com/crguezl/files-in-javascript-tut}
\item
\htmladdnormallink{W3C File API}{http://dev.w3.org/2006/webapi/FileAPI/\#filereader-interface}
\item Ejemplo \verb|FileList| en
\htmladdnormallink{jsfiddle}{http://jsfiddle.net/casiano/GEDC9/}
o bien 
\begin{verbatim}
[~/src/javascript/fileapi/html5rocks]$ pwd -P
/Users/casiano/local/src/javascript/fileapi/html5rocks
[~/src/javascript/fileapi/html5rocks(master)]$ ls -l filelist.html 
-rw-r--r--  1 casiano  staff  767 15 feb 17:21 filelist.html
\end{verbatim}
  \begin{itemize}
  \item
The 
\htmladdnormallink{EventTarget.addEventListener()}{https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener}
method 
\begin{verbatim}
target.addEventListener(type, listener[, useCapture]);
\end{verbatim}
registers the specified listener on the \verb|EventTarget| 
it's called
on. The event target may be an Element in a document, the Document
itself, a Window, or any other object that supports events (such as
\verb|XMLHttpRequest|).
  \item
  \begin{verbatim}
  > date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));
  Wed Dec 12 2012 03:00:00 GMT+0000 (WET)
  > date.toLocaleDateString()
  "12/12/2012"
  \end{verbatim}
  \item
  \htmladdnormallink{Date.prototype.toLocaleDateString()}{https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString}
  \end{itemize}
\item
Ejemplo de Drag and Drop en 
\htmladdnormallink{jsfiddle}{http://jsfiddle.net/casiano/H7U7X/}
o bien en:
\begin{verbatim}
[~/src/javascript/fileapi/html5rocks]$ pwd -P
/Users/casiano/local/src/javascript/fileapi/html5rocks
[~/src/javascript/fileapi/html5rocks]$ ls -l dragandrop.html 
-rw-r--r--  1 casiano  staff  1535 15 feb 18:25 dragandrop.html
\end{verbatim}
  \begin{itemize}
    \item \verb|stopPropagation| stops the event from 
\htmladdnormallink{bubbling up the event chain.}{http://www.w3.org/TR/DOM-Level-3-Events/\#event-flow}

      Suppose you have a table and within that table you have an anchor
      tag. Both the table and the anchor tag have code to handle mouse
      clicks. When the user clicks on the anchor tag, which HTML element should
      process the event first? Should it be the table then the anchor tag or
      vice versa?

      Formally, the event path is broken into three phases. 
      \begin{itemize}
      \item
      In the \cei{capture phase}, the event starts at the top of the DOM tree, and propagates through
      to the parent of the target. 
      \item
      In the \cei{target phase}, the event object arrives
      at its target. This is generally where you will write your event-handling
      code. 
      \item
      In the \cei{bubble phase}, the event will move back up through the tree
      until it reaches the top. Bubble phase propagation happens in reverse
      order to the capture phase, with an event starting at the parent of
      the target and ending up back at the top of the DOM tree. 
      \item \htmladdnormallink{jsfiddle}{http://jsfiddle.net/casiano/7Kp4L/}
      \end{itemize}
      \begin{rawhtml}
      <img src="http://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.png" alt="Graphical representation of an event dispatched in a DOM tree using the DOM event flow" title="Graphical representation of an event dispatched in a DOM tree using the DOM event flow" />
      \end{rawhtml}

      These days,
      there’s a choice to register an event in either the capture phase
      or the bubble phase. If you register an event in the capture phase,
      the parent element will process the event before the child element.

    \item \verb|preventDefault| prevents the default action the browser makes on that event.
  \end{itemize}
  \item
    After you've obtained a \verb|File| reference, instantiate a \verb|FileReader| object
    to read its contents into memory. 
    \begin{verbatim}
    var reader = new FileReader();
    \end{verbatim}

    When the load finishes, the reader's
    \verb|onload| event is fired and its result attribute can be used to access
    the file data.
      \begin{verbatim}
        reader.onload = function(e) { 
          var contents = e.target.result;
          
          ....
        }
      \end{verbatim}
    See \htmladdnormallink{jsfiddle}{http://jsfiddle.net/casiano/7ekt8/} or
    \begin{verbatim}
    [~/src/javascript/fileapi/html5rocks]$ pwd -P
    /Users/casiano/local/src/javascript/fileapi/html5rocks
    [~/src/javascript/fileapi/html5rocks]$ ls -l readimages.html 
    -rw-r--r--  1 casiano  staff  1530 15 feb 21:00 readimages.html
    \end{verbatim}
    \begin{itemize}
    \item
    \htmladdnormallink{base64 testing image jsfiddle}{http://jsfiddle.net/casiano/Xadvz/\#base}
    \item The \verb|insertBefore()| method inserts a node as a child, right before an existing child, which you specify. See
    \begin{verbatim}
    [~/src/javascript/fileapi/html5rocks]$ ls -l readimages.html 
    -rw-r--r--  1 casiano  staff  1530 15 feb 21:00 readimages.html
    \end{verbatim}
    \end{itemize}
\end{itemize}

\parrafo{global.css}

\begin{verbatim}
[~/Dropbox/src/javascript/PLgrado/ini(master)]$ cat global.css
html *
{
   font-size: large; 
   /* The !important ensures that nothing can override what you've set in this style (unless it is also important). */
   font-family: Arial;
}

.thumb {
    height: 75px;
    border: 1px solid #000;
    margin: 10px 5px 0 0;
  }

h1            { text-align: center; font-size: x-large; }
th, td        { vertical-align: top; text-align: left; }   
/* #finaltable  * { color: white; background-color: black; }   */

/* #finaltable table { border-collapse:collapse; } */
/* #finaltable table, td { border:1px solid white; } */
#finaltable:hover td { background-color: blue; } 
tr:nth-child(odd)    { background-color:#eee; }
tr:nth-child(even)    { background-color:#00FF66; }
input        { text-align: right;  border: none;       }     /* Align input to the right  */
textarea     { border: outset; border-color: white;       }                        
table        { border: inset; border-color: white; }
.hidden      { display: ____; }
.unhidden    { display: _____; }
table.center { margin-left:auto; margin-right:auto; }
#result      { border-color: red; }
tr.error       { background-color: red; }
pre.output   { background-color: white; }
span.repeated { background-color: red }
span.header { ________________: ____ }
span.comments { ________________: ______ }
span.blanks { ________________: _____ }
span.nameEqualValue { ________________: ____ }
span.error { ________________: ___ }

body
{
 background-color:#b0c4de;  /* blue */
}
\end{verbatim}

\parrafo{Ficheros de Prueba}

\begin{verbatim}
~/Dropbox/src/javascript/PLgrado/ini(master)]$ cat input.ini 
; last modified 1 April 2001 by John Doe
[owner]
name=John Doe
organization=Acme Widgets Inc.

[database]
; use IP address in case network name resolution is not working
server=192.0.2.62     
port=143
file = "payroll.dat"
\end{verbatim}

\begin{verbatim}
$ cat input2.ini 
[special_fields] 
required = "EmailAddr,FirstName,LastName,Mesg" 
csvfile = "contacts.csv" 
csvcolumns = "EmailAddr,FirstName,LastName,Mesg,Date,Time" 

[email_addresses] 
sales = "jack@yahoo.com,mary@my-sales-force.com,president@my-company.com"
\end{verbatim}

\begin{verbatim}
$ cat inputerror.ini
[owner]
name=John Doe
organization$Acme Widgets Inc.
 
[database
; use IP address in case network name resolution is not working
server=192.0.2.62     
port=143
file = "payroll.dat"
\end{verbatim}

\parrafo{ini.js}


\begin{verbatim}
[~/Dropbox/src/javascript/PLgrado/ini(master)]$ cat ini.js 
"use ______"; // Use ECMAScript 5 strict mode in browsers that support it

$(document)._____(function() {
   $("#fileinput").______(calculate);
});

function calculate(evt) {
  var f = evt.target.files[0]; 

  if (f) {
    var r = new __________();
    r.onload = function(e) { 
      var contents = e.target.______;
      
      var tokens = lexer(contents);
      var pretty = tokensToString(tokens);
      
      out.className = 'unhidden';
      initialinput._________ = contents;
      finaloutput._________ = pretty;
    }
    r.__________(f); // Leer como texto
  } else { 
    alert("Failed to load file");
  }
}

var temp = '<li> <span class = "<%= ______ %>"> <%= _ %> </span>\n';

function tokensToString(tokens) {
   var r = '';
   for(var i in tokens) {
     var t = tokens[i];
     var s = JSON.stringify(t, undefined, 2);
     s = _.template(temp, {t: t, s: s});
     r += s;
   }
   return '<ol>\n'+r+'</ol>';
}

function lexer(input) {
  var blanks         = /^___/;
  var iniheader      = /^________________/;
  var comments       = /^________/;
  var nameEqualValue = /^________________________/;
  var any            = /^_______/;

  var out = [];
  var m = null;

  while (input != '') {
    if (m = blanks.____(input)) {
      input = input.substr(m.index+___________);
      out.push({ type : ________, match: _ });
    }
    else if (m = iniheader.exec(input)) {
      input = input.substr(___________________);
      _______________________________________ // avanzemos en input
    }
    else if (m = comments.exec(input)) {
      input = input.substr(___________________);
      _________________________________________
    }
    else if (m = nameEqualValue.exec(input)) {
      input = input.substr(___________________);
      _______________________________________________
    }
    else if (m = any.exec(input)) {
      _______________________________________
      input = '';
    }
    else {
      alert("Fatal Error!"+substr(input,0,20));
      input = '';
    }
  }
  return out;
}
\end{verbatim}

\parrafo{Tareas}

\begin{itemize}
\item La entrada debería poder leerse desde un fichero
\item Escriba las pruebas
\item Use templates externos \verb|underscore| para estructurar la salida
\end{itemize}

\parrafo{Véase}

\begin{enumerate}
\item 
\htmladdnormallink{JSON.stringify}{https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify}
\item 
\htmladdnormallink{www.json.org}{http://www.json.org/}
\item 
\htmladdnormallink{JSON in JavaScript}{http://www.json.org/js.html}
\item 
\htmladdnormallink{Underscore: template}{http://underscorejs.org/\#template}
\item 
\htmladdnormallink{Stackoverflow::how to use Underscore template}{http://stackoverflow.com/questions/4778881/how-to-use-underscore-js-as-a-template-engine}
\end{enumerate}

\sectionpractica{Analizador Léxico para Un Subconjunto de JavaScript}

\begin{enumerate}
\item  Clone el proyecto 
\htmladdnormallink{ull-etsii-grado-pl-minijavascript}{https://github.com/crguezl/ull-etsii-grado-pl-minijavascript} en github. Rellene las partes que faltan en cada fichero.
\end{enumerate}
